;******************************************************************************;
;                                                                              ;
;                                                         :::      ::::::::    ;
;    .emacs                                             :+:      :+:    :+:    ;
;                                                     +:+ +:+         +:+      ;
;    By: mcanal <zboub@42.fr>                       +#+  +:+       +#+         ;
;                                                 +#+#+#+#+#+   +#+            ;
;    Created: 2015/04/26 16:54:03 by mcanal            #+#    #+#              ;
;    Updated: 2015/09/24 00:03:14 by mcanal           ###   ########.fr        ;
;                                                                              ;
;******************************************************************************;

; Load general features files
(setq config_files "~/emacs_stuff/site-lisp/")
(setq load-path (append (list nil config_files) load-path))

(require 'list)
(require 'string)
(require 'comments)
(require 'header)
(require 'bind-key)
(require 'yasnippet)
(require 'web-mode)
(require 'auto-complete)
(require 'auto-complete-config)
(require 'scala-mode2)
;(require 'fuzzy)
;(require 'php-mode)
;(require 'popup)
;(require 'flyspell)
;(require 'auto-complete-c-headers)

; Set default emacs configuration
(set-language-environment "UTF-8")
(setq-default font-lock-default-modes t)
;(setq-default line-number-mode ())
(setq-default tab-width 4)
(setq-default indent-tabs-mode t)
(bind-key* (kbd "DEL") 'backward-delete-char)
(setq-default c-backspace-function 'backward-delete-char)
(setq-default c-basic-offset 4)
(c-set-offset 'inclass '+) ;++ me for c++ only please :O
(c-set-offset 'case-label '+)
(setq-default c-default-style "linux")
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.hpp\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.tpp\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cpp\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.jvm\\'" . scala-mode))
(setq-default tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60
                             64 68 72 76 80 84 88 92 96 100 104 108 112 116 120))

;scala
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(gud-gdb-command-name "gdb --annotate=1")
 '(irony-server-build-dir nil)
 '(large-file-warning-threshold nil)
 '(scala-font-lock:constant-list nil)
 '(scala-indent:step 4))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;color zboubing
;(set-face-foreground 'font-lock-comment-face "SteelBlue")
(set-face-foreground 'font-lock-string-face "#E6C28F")
;(set-face-foreground 'font-lock-keyword-face "darkorange")
;(set-face-foreground 'font-lock-type-face "yellow")
(set-face-foreground 'font-lock-function-name-face "royal blue")
(set-face-foreground 'font-lock-variable-name-face "orange")
(set-face-foreground 'font-lock-builtin-face "magenta")
;(set-face-foreground 'font-lock-constant-face "cornflowerblue")
;(set-face-foreground 'font-lock-warning-face "red")

(defun my-web-mode-hook ()
  "Hooks for Web mode."
 (set-face-attribute 'web-mode-html-tag-bracket-face nil :foreground "green")
 (set-face-attribute 'web-mode-html-tag-face nil :foreground "green")
 (set-face-attribute 'web-mode-html-attr-name-face nil :foreground "yellow")
 (set-face-attribute 'web-mode-html-attr-value-face nil :foreground "firebrick2")
)
(add-hook 'web-mode-hook  'my-web-mode-hook)


; Custom adds
(column-number-mode 1)
(line-number-mode 1)
(setq linum-format "%3d ")
(setq backup-directory-alist (list (cons "." "~/emacsbackups/")))
(transient-mark-mode t)
(setq make-backup-files ())
(add-hook 'prog-mode-hook #'hs-minor-mode)
;(add-hook 'emacs-startup-hook 'toggle-window-split)
(setq split-height-threshold 25)
(setq split-width-threshold 80)

;completion
(ac-config-default)
(set-default 'ac-sources
			 '(
;			   ac-source-semantic
;			   ac-source-yasnippet
;			   ac-source-abbrev
			   ac-source-dictionary
			   ac-source-words-in-same-mode-buffers
;			   ac-source-imenu
;			   ac-source-files-in-current-dir
;			   ac-source-filename
			   ))
;(setq ac-auto-start 2)         ;; 2
(setq ac-delay 0)              ;; 0.1
(setq ac-auto-show-menu 0.4)     ;; 0.8
;(setq ac-quick-help-delay 0.6) ;; 1.5
;(setq ac-use-fuzzy 1)
(setq ac-fuzzy-cursor-color 'color-160)
(add-hook 'auto-complete-mode-hook
          (lambda()
	    (setq ac-use-menu-map t)
	    (local-set-key [(backtab)] 'auto-complete)
	    (define-key ac-menu-map [(next)] 'ac-next)
	    (define-key ac-menu-map [(prior)] 'ac-previous)
		(define-key ac-completing-map [down] nil)
		(define-key ac-completing-map [up] nil)
	    ))

;flyspell
;(autoload 'flyspell-mode "flyspell" "On-the-fly spelling checker." t)
;(autoload 'flyspell-delay-command "flyspell" "Delay on command." t)
;(autoload 'tex-mode-flyspell-verify "flyspell" "" t) 
;(add-hook 'c-mode-hook (lambda ()
; (flyspell-prog-mode) (flyspell-issue-message-flag nil)
; ))
;(add-hook 'c++-mode-hook (lambda ()
; (flyspell-prog-mode) (flyspell-issue-message-flag nil)
; ))
;(ac-flyspell-workaround)

;mouse scrolling workaround
;(xterm-mouse-mode 1)
(bind-key* (kbd "<mouse-4>") 'previous-line)
(bind-key* (kbd "<mouse-5>") 'next-line)

;unbinds
(add-hook 'c++-mode-hook
          (lambda()
            (local-unset-key (kbd "M-q"))))
(global-unset-key (kbd "M-q"))

;binds
(bind-key* [(meta g)] 'goto-line)
(bind-key* [(meta g)] 'goto-line)
(bind-key* [(insertchar)] 'set-mark-command)
;(bind-key* [(backtab)] 'auto-complete)
(bind-key [(backtab)] 'dabbrev-expand)
(bind-key* (kbd "ø") 'auto-complete-mode)
(bind-key* (kbd "ÿ") 'tab-to-tab-stop)
(bind-key* (kbd "<f2>") 'kill-region)
(bind-key* (kbd "<f3>") 'kill-ring-save)
(bind-key* (kbd "<f4>") 'yank)
(bind-key* (kbd "<C-f4>") 'yank-pop)
(bind-key* (kbd "<f5>") 'kill-line)
(bind-key* (kbd "<C-f5>") 'kill-paragraph)
(bind-key* [(f6)] 'backward-kill-word)
(bind-key* (kbd "<C-f6>") 'backward-delete-char)
(bind-key* [(f7)] 'kill-word)
(bind-key* (kbd "<C-f7>") 'delete-char)
(bind-key* [(f8)] 'undo)
(bind-key* [(f9)] 'isearch-forward)
(bind-key* (kbd "<C-f9>") 'transpose-chars)
(bind-key* [(f10)] 'query-replace)
(bind-key* (kbd "<C-f10>") 'transpose-words)
(bind-key* [(f11)] 'save-buffer)
(bind-key* (kbd "<C-f11>") 'transpose-lines)
(bind-key* [(f12)] 'save-buffers-kill-emacs)
(bind-key* [(up)] 'previous-line)
(bind-key* [(down)] 'next-line)
(bind-key* (kbd "M-i") 'previous-line)
(bind-key* (kbd "M-j") 'backward-char)
(bind-key* (kbd "M-k") 'next-line)
(bind-key* (kbd "M-l") 'forward-char)
(bind-key* (kbd "M-u") 'backward-word)
(bind-key* (kbd "M-o") 'forward-word)
(bind-key* (kbd "M-_") 'move-beginning-of-line)
(bind-key* (kbd "M-ç") 'move-end-of-line)
(bind-key* (kbd "M-m") 'normdown) ;custom
(bind-key* (kbd "M-p") 'normup) ;custom
(bind-key* (kbd "M-;") 'semi-c)
(bind-key* (kbd "C-c M-c") 'stuff)
(bind-key* (kbd "<M-prior>") 'previous-multiframe-window)
(bind-key* (kbd "<M-next>") 'next-multiframe-window)
(bind-key* (kbd "<M-insert>") 'find-file-other-window)
(bind-key* (kbd "<M-delete>") 'delete-window)
(bind-key* (kbd "<M-up>") 'global-linum-mode)
(bind-key* (kbd "<M-down>")  'hs-toggle-hiding)
(bind-key* (kbd "<M-left>") 'hs-hide-all)
(bind-key* (kbd "<M-right>")  'hs-show-all)
(bind-key* (kbd "M-s") 'shell-that)
(bind-key* (kbd "M-d") 'compile)

;(bind-key* [(kp-0)] 'global-linum-mode)
;(bind-key* (kbd "1") 'set-mark-command)
;(bind-key* (kbd "2") 'other-window)
;(bind-key* (kbd "3") 'find-file)
;(bind-key* (kbd "4") 'mainarg) ;custom
;(bind-key* (kbd "5") 'main) ;custom
;(bind-key* (kbd "6") 'kill-paragraph)
;(bind-key* (kbd "7") 'transpose-chars)
;(bind-key* (kbd "8") 'transpose-words)
;(bind-key* (kbd "9") 'transpose-line)
(bind-key* (kbd "M-&") 'par) ;custom
(bind-key* (kbd "M-é") 'cro) ;custom
(bind-key* (kbd "M-\"") 'aco) ;custom
(bind-key* (kbd "M-\'") 'guigui) ;custom
(bind-key* (kbd "M-(") 'gui) ;custom
(bind-key* (kbd "M--") 'inc) ;custom
(bind-key* (kbd "M-è") 'main) ;custom
(bind-key* "\C-c\C-g" 'headcomment) ;custom
(bind-key* "M-q" 'comment) ;custom
(bind-key* "\C-q" 'debug) ;custom
(bind-key* "\C-g" 'indent-buffer) ;custom
;(bind-key* (kbd "M-h") 'hpp-template) ;custom
;(bind-key* (kbd "M-c") 'cpp-template) ;custom
(bind-key* (kbd "M-c") 'cpp-get-set-template) ;custom
(bind-key* (kbd "M-h") 'hpp-get-set-template) ;custom
(bind-key* (kbd "M-w") 'compile)

(defun par()
  "par"
  (interactive)
  (insert "(")
  (insert ")")
  (backward-char 1)
)

(defun cro()
  "cro"
  (interactive)
  (insert "[")
  (insert "]")
  (backward-char 1)
)

(defun aco()
  "ac"
  (interactive)
  (insert "\n{")
  (indent-for-tab-command)
  (insert "\n\n}")
  (indent-for-tab-command)
  (previous-line 1)
  (indent-for-tab-command)
)

(defun guigui()
  "guigui"
  (interactive)
  (insert "\"")
  (insert "\"")
  (backward-char 1)
)

(defun gui()
  "gui"
  (interactive)
  (insert "\'")
  (insert "\'")
  (backward-char 1)
)

(defun inc()
  "inc"
  (interactive)
  (insert "<")
  (insert ">")
  (backward-char 1)
  )

(defun mainarg()
  "main"
  (interactive)
  (insert "int\t\tmain(int ac, char **av)\n{\n\t\n\treturn (0);\n}\n")
  (previous-line 3)
  (forward-char 1)
  )

(defun main()
  "main"
  (interactive)
  (insert "int\t\tmain(void)\n{\n\t\n\treturn (0);\n}\n")
  (previous-line 3)
  (forward-char 1)
)

(defun normdown()
  "normdown"
  (interactive)
  (next-line 24)
)


(defun normup()
  "normup"
  (interactive)
  (previous-line 24)
)


(defun headcomment()
  "head comment"
  (interactive)
  (newline)
  (insert "/*")
  (newline)
  (insert "** ")
  (newline)
  (insert "*/")
  (previous-line 2)
  (forward-char 4)  
)

(defun comment()
  "comment"
  (interactive)
  (insert "//")
  (backward-char 2)
)

(defun debug()
  "debug"
  (interactive)
  (insert " //debug")
  (backward-char 8)
)

(defun hpp-template(class)
  "hpp-template"
  (interactive "sClass name? ")
  (insert-hpp-template)
  (replace-string "zz" class)
;  (indent-buffer)
)

(defun cpp-template(class)
  "cpp-template"
  (interactive "sClass name? ")
  (insert-cpp-template)
  (replace-string "zz" class)
;  (indent-buffer)
)

(defun insert-hpp-template()
  "insert-hpp-template"
  (interactive)
  (header-insert)
  (goto-line 12)
;  (insert "\n#ifndef ZZ_HPP\n\n")
  (insert "\n#ifndef ZZ_CLASS_HPP\n\n")
  (insert "/*\n** defines\n*/\n")
;  (insert "# define ZZ_HPP\n\n")
  (insert "# define ZZ_CLASS_HPP\n\n")
  (insert "/*\n** includes\n*/\n")
  (insert "//# include <iostream>\n\n")
  (insert "/*\n** class\n*/\n")
  (insert "class Zz\n{\n")
  (insert "\tpublic:\n")
  (insert "\t\tZz(void);\n")
  (insert "\t\tZz(Zz const &copy);\n")
  (insert "\t\t~Zz(void);\n")
  (insert "\t\tZz\t\t&operator=(Zz const &copy);\n\n")
  (insert "\tprotected:\n\n")
  (insert "};\n\n")
;  (insert "#endif //ZZ_HPP")
  (insert "#endif //ZZ_CLASS_HPP")
  (goto-line 12)
)

(defun insert-cpp-template()
  "insert-cpp-template"
  (interactive)
  (header-insert)
  (goto-line 12)
;  (insert "\n#include \"Zz.hpp\"\n\n")
  (insert "\n#include \"Zz.class.hpp\"\n\n")
  (insert "/*\n** constructor\n*/\n")
  (insert "Zz::Zz(void)\n{\n\n}\n\n")
  (insert "Zz::Zz(Zz const &copy)\n{\n")
  (insert "\t*this = copy;\n}\n\n")
  (insert "/*\n** destructor\n*/\n")
  (insert "Zz::~Zz(void)\n{\n\n}\n\n")
  (insert "/*\n** operator overload\n*/\n")
  (insert "Zz\t\t\t\t\t&Zz::operator=(Zz const &copy)\n{\n")
  (insert "\t//this->_z = copy._z;\n\n\treturn *this;\n}\n\n")
  (insert "/*\n** public\n*/\n")
  (insert "\n\n")
  (insert "/*\n** getter/setter\n*/\n")
  (insert "\n\n")
  (insert "/*\n** protected\n*/\n")
  (insert "\n\n")
  (insert "")
  (goto-line 12)
)

(defun hpp-get-set-template(type var)
  "hpp-get-set-template"
  (interactive "stype? \nsvar name? ")
  (point-to-register 'p)
  (insert "yyy\t\t_zzz;\n")
  (insert "yyy\t\tgetZzz\(void\)\tconst;\n")
  (insert "void\t\tsetZzz\(yyy zzz\);\n")
  (goto-line 12)
  (replace-string "yyy" type)
  (goto-line 12)
  (replace-string "int\t\t_zzz" "int\t\t\t_zzz")
  (goto-line 12)
  (replace-string "int\t\tget_zzz" "int\t\t\tget_zzz")
  (goto-line 12)
  (replace-string "zzz" var)
  (indent-buffer)
  (jump-to-register 'p)
)

(defun cpp-get-set-template(type var class)
  "cpp-get-set-template"
  (interactive "stype? \nsvar name? \nsclass name? ")
  (point-to-register 'p)
  (insert "yyy\t\t\tXxx::getZzz(void)\tconst\t{ return this->_zzz; }\n")
  (insert "void\t\t\tXxx::setZzz(yyy zzz)\t\t{ this->_zzz = zzz; }\n")
  (goto-line 12)
  (replace-string "yyy" type)
  (goto-line 12)
  (replace-string "int\t\t\tXxx" "int\t\t\t\tXxx")
  (goto-line 12)
  (replace-string "zzz" var)
  (goto-line 12)
  (replace-string "xxx" class)
  (indent-buffer)
  (jump-to-register 'p)
)

(defun shell-that ()
  "shell splitted"
  (interactive)
  (split-window-vertically)
  (next-multiframe-window)
  (shell)
)

(defun semi-c ()
  "semi-colon at end of line, without moving!"
  (interactive)
  (point-to-register 'm)
  (move-end-of-line nil)
  (insert ";")
  (jump-to-register 'm)
)

(defun stuff (class)
  "Do stuffs."
  (interactive "sClass name? ")
;  (find-file-other-window (concat class ".cpp"))
  (find-file-other-window (concat class ".class.cpp"))
  (insert-cpp-template)
  (replace-string "zz" class)
  (save-buffer)
  (delete-window)
;  (find-file-other-window (concat class ".hpp"))
  (find-file-other-window (concat class ".class.hpp"))
  (insert-hpp-template)
  (replace-string "zz" class)
  (save-buffer)
  (delete-window)
  (shell-command "ls")
)



(defun indent-buffer ()
  "Indents an entire buffer using the default intenting scheme."
  (interactive)
  (point-to-register 's)
  (goto-line 12)
  (point-to-register 'o)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) ())
  (jump-to-register 'o)
  (replace-regexp "\\(\tint\\)\\([^\t]\\)" "\\1\t\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\nint\\)\\([^\t]\\)" "\\1\t\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\tchar\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\nchar\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\tvoid\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\nvoid\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\tdouble\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\ndouble\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\tfloat\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\nfloat\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\tshort\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\nshort\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\tlong\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\nlong\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\tsize_t\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(\nsize_t\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(static int\\)\\([^\t]\\)" "\\1\t\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(static char\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(static void\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(static double\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(static float\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(static short\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(static long\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-regexp "\\(static size_t\\)\\([^\t]\\)" "\\1\t\\2")
  (jump-to-register 'o)
  (replace-string " \n" "\n")
  (jump-to-register 'o)
  (replace-string "  \n" "\n")
  (jump-to-register 'o)
  (replace-string "   \n" "\n")
  (jump-to-register 'o)
  (replace-string "    \n" "\n")
  (jump-to-register 'o)
  (replace-string "    " "\t")
  (jump-to-register 'o)
  (replace-string "   " "\t")
  (jump-to-register 'o)
  (replace-string "  " "\t")
  (jump-to-register 'o)
  (replace-string "\t\n" "\n")
  (jump-to-register 'o)
  (replace-string "\t\t\n" "\n")
  (jump-to-register 'o)
  (replace-string "\tint " "\tint\t")
  (jump-to-register 'o)
  (replace-string "int\t " "int\t\t")
  (jump-to-register 'o)
  (replace-string "static void " "static void\t")
  (jump-to-register 'o)
  (replace-string "static char " "static char\t")
  (jump-to-register 'o)
  (replace-string "static int " "static int\t")
  (jump-to-register 'o)
  (replace-string "static double " "static double\t")
  (jump-to-register 'o)
  (replace-string "static t_lst " "static t_lst\t")
  (jump-to-register 'o)
  (replace-string "static size_t " "static size_t\t")
  (jump-to-register 'o)
  (replace-string "static short " "static short\t")
  (jump-to-register 'o)
  (replace-string "static float " "static float\t")
  (jump-to-register 'o)
  (replace-string "static long " "static long\t")
  (jump-to-register 'o)
  (replace-string "\nvoid " "\nvoid\t")
  (jump-to-register 'o)
  (replace-string "\nchar " "\nchar\t")
  (jump-to-register 'o)
  (replace-string "\nint " "\nint\t")
  (jump-to-register 'o)
  (replace-string "\ndouble " "\ndouble\t")
  (jump-to-register 'o)
  (replace-string "\nt_lst " "\nt_lst\t")
  (jump-to-register 'o)
  (replace-string "\nsize_t " "\nsize_t\t")
  (jump-to-register 'o)
  (replace-string "\nfloat " "\nfloat\t")
  (jump-to-register 'o)
  (replace-string "\nshort " "\nshort\t")
  (jump-to-register 'o)
  (replace-string "\nlong " "\nlong\t")
  (jump-to-register 'o)
  (replace-string " ;" ";")
  (jump-to-register 'o)
  (replace-string "break;" "break ;")
  (jump-to-register 'o)
  (replace-string "continue;" "continue ;")
  (jump-to-register 'o)
  (replace-string "return;" "return ;")
  (jump-to-register 'o)
  (replace-string "return(" "return (")
  (jump-to-register 'o)
  (replace-string "if(" "if (")
  (jump-to-register 'o)
  (replace-string "while(" "while (")
  (jump-to-register 'o)
  (replace-string "\n\n\n" "\n\n")
  (jump-to-register 'o)
  (replace-string "\n\n\n" "\n\n")
  (jump-to-register 'o)
  (replace-string "\n\n\n\n" "\n\n")
  (jump-to-register 'o)
  (replace-string "\n\n\n\n\n" "\n\n")
  (jump-to-register 's)
  (require 'whitespace)
  (setq whitespace-auto-cleanup t)
; (whitespace-global-mode 1)
)

;*******************************************************************************;
